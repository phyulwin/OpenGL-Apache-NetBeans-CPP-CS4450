/***************************************************************
* file: DrawPrimitives.java
* author: Kelly L.
* class: CS 4450.01 (S25-Regular) Computer Graphics
*
* assignment: program 1
* date last modified: 2/10/2025
*
* purpose: This class provides methods to draw basic geometric primitives.
* note: The code contains content generated by AI.
****************************************************************/

package Program1;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import static org.lwjgl.opengl.GL11.*;

public class DrawPrimitives {

    // method: DrawPrimitives (constructor)
    // purpose: Default constructor for the DrawPrimitives class.
    private DrawPrimitives() {
        throw new UnsupportedOperationException("Utility class cannot be instantiated.");
    }

    // method: drawLine
    // purpose: Draws a straight line between two points.
    public static void drawLine(float startX, float startY, float endX, float endY) {
        glColor3f(1.0f, 0.0f, 0.0f); // Set line color to red
        glBegin(GL_LINES); // Begin drawing a line
        glVertex2f(startX, startY); // Specify the starting vertex
        glVertex2f(endX, endY); // Specify the ending vertex
        glEnd(); 
    }

    // method: drawCircle
    // purpose: Draws a circle using OpenGL.
    public static void drawCircle(float centerX, float centerY, float radius) {
        int numSegments = 100; // Higher number gives a smoother circle
        float theta;

        glColor3f(0.0f, 0.0f, 1.0f); // Set color to blue
        glBegin(GL_LINE_LOOP); // Use GL_LINE_LOOP to create the outline of a circle
        for (int i = 0; i < numSegments; i++) {
            theta = (float) (2.0f * Math.PI * i / numSegments); // Compute angle
            float x = (float) (radius * Math.cos(theta)); // Compute x coordinate
            float y = (float) (radius * Math.sin(theta)); // Compute y coordinate
            glVertex2f(centerX + x, centerY + y); // Offset by center coordinates
        }
        glEnd(); 
    }

    // method: drawEllipse
    // purpose: Draws an ellipse using OpenGL.
    public static void drawEllipse(float centerX, float centerY, float radiusX, float radiusY) {
        int numSegments = 100; // Higher number gives a smoother ellipse
        float theta;

        glColor3f(0.0f, 1.0f, 0.0f); // Set color to green
        glBegin(GL_LINE_LOOP); // Use GL_LINE_LOOP to create the outline of an ellipse
        for (int i = 0; i < numSegments; i++) {
            theta = (float) (2.0f * Math.PI * i / numSegments); // Compute angle
            float x = (float) (radiusX * Math.cos(theta)); // Compute x coordinate
            float y = (float) (radiusY * Math.sin(theta)); // Compute y coordinate
            glVertex2f(centerX + x, centerY + y); // Offset by center coordinates
        }
        glEnd(); 
    }
}